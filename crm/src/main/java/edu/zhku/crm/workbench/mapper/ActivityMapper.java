package edu.zhku.crm.workbench.mapper;

import edu.zhku.crm.workbench.domain.Activity;
import edu.zhku.crm.workbench.domain.ContactsActivityRelation;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Apr 21 15:09:30 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     * 创建市场活动
     *
     * @mbggenerated Thu Apr 21 15:09:30 CST 2022
     */
    int insertActivity(Activity activity);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Apr 21 15:09:30 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     * 根据id查询市场活动的信息
     *
     * @mbggenerated Thu Apr 21 15:09:30 CST 2022
     */
    Activity selectActivityById(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Apr 21 15:09:30 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     * 修改市场活动
     *
     * @mbggenerated Thu Apr 21 15:09:30 CST 2022
     */
    int updateActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     * 根据条件查询市场活动的总条数
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String,Object> map);

    /**
     * 根据id批量删除市场活动
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 查询所有市场活动,用于批量导出
     * @return
     */
    List<Activity> selectAllActivities();

    /**
     * 查询选择的活动，用于选择导出
     * @param ids
     * @return
     */
    List<Activity> selectActivityByIdsForExport(String[] ids);

    /**
     * 批量插入市场活动，用于导入数据
     * @param activityList
     * @return
     */
    int insertActivityByList(List<Activity> activityList);

    /**
     * 根据id查询市场活动信息，用于显示详细信息
     * @param id
     * @return
     */
    Activity selectActivityByIdForDetail(String id);

    /**
     * 根据线索id查询关联的市场活动的信息，用于关联线索
     * @param clueId
     * @return
     */
    List<Activity> selectActivityByClueIdForDetail(String clueId);

    /**
     * 根据市场活动名称查询，并且把已经关联过的clueId排除，用于关联市场活动
     * @return
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String,Object> map);

    /**
     * 根据市场活动名称模糊查询，并且该市场活动是已经跟线索关联过的，用于线索转换是创建业务功能
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String,Object> map);

    /**
     * 根据市场活动名称模糊查询，用于创建交易下的市场活动源
     * @param name
     * @return
     */
    List<Activity> selectActivityByName(String name);

    /**
     * 根据联系人id查询关联的市场活动，用于查看联系人的详细信息
     * @param contactsId
     * @return
     */
    List<Activity> selectActivityByContactsIdForDetail(String contactsId);
}